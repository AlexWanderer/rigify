import bpy
from ...utils import copy_bone
from ...utils import strip_org, make_deformer_name, connected_children_names, make_mechanism_name
from ...utils import create_circle_widget
from ...utils import MetarigError

class Rig:
    
    def __init__(self, obj, bone_name, params):
        self.obj = obj
        self.org_bones = [bone_name] + connected_children_names(obj, bone_name)
        self.params = params
        
        if len(self.org_bones) <= 1:
            raise MetarigError("RIGIFY ERROR: Bone '%s': listen bro, that finger rig jusaint put tugetha rite. A little hint, use more than one bone!!" % (strip_org(bone_name)))            

    def generate(self):

        bpy.ops.object.mode_set(mode ='EDIT')
        
        # Create the deformation and control bone chains.
        # Just copies of the original chain.
        def_chain     = []
        ctrl_chain    = []
        mch_chain     = []
        mch_chain_drv = []
        
        temp_name = strip_org(self.org_bones[0])
        name = temp_name + "_master"
        ctrl_bone_master = self.obj.data.edit_bones.new(name)
        ctrl_bone_master.head[:] = self.obj.edit_bones[temp_name].head
        ctrl_bone_master.tail[:] = self.obj.edit_bones[-1].tail
        ctrl_bone_master.roll    = self.obj.edit_bones[temp_name].roll
        
        for i in range(len(self.org_bones)):
            name = self.org_bones[i]

            # Create control and deformation bones
            temp_name = strip_org(name)
            ctrl_bone = copy_bone(self.obj, name, temp_name)
            def_bone  = copy_bone(self.obj, name, make_deformer_name(strip_org(name)))
            mch_bone  = copy_bone(self.obj, name, make_mechanism_name(strip_org(name)))
            mch_bone_drv  = copy_bone(self.obj, name, mch_bone + "_drv")

            eb = self.obj.data.edit_bones
            ctrl_bone_e     = eb[ctrl_bone]
            def_bone_e      = eb[def_bone]
            mch_bone_e      = eb[mch_bone]
            mch_bone_drv_e  = eb[mch_bone_drv]

            # Parenting
            if i == 0:
                # First ctl bone
                ctrl_bone_e.parent = eb[self.org_bones[0]].parent
                # First def bone
                def_bone_e.parent  = eb[self.org_bones[0]].parent
            else:
                # The rest
                ctrl_bone_e.parent = eb[ctrl_chain[-1]]
                ctrl_bone_e.use_connect = False
                def_bone_e.parent  = eb[def_chain[-1]]
                def_bone_e.use_connect = True
            # Add to list
            ctrl_chain += [ctrl_bone]
            def_chain  += [def_bone]
            
        bpy.ops.object.mode_set(mode ='OBJECT')
        
        pb = self.obj.pose.bones
        
        # Constraints for org and def
        for org, ctrl, deform in zip(self.org_bones, ctrl_chain, def_chain):
 
            con           = pb[org].constraints.new('COPY_TRANSFORMS')
            con.target    = self.obj
            con.subtarget = ctrl
           
            con           = pb[deform].constraints.new('COPY_TRANSFORMS')
            con.target    = self.obj
            con.subtarget = ctrl
            
            if self.params.make_stretch:
                if deform != def_chain[-1]:
                    con           = pb[deform].constraints.new('STRETCH_TO')
                    con.target    = self.obj
                    con.subtarget = ctrl_chain[ctrl_chain.index(ctrl)+1]
                    con.volume    = 'NO_VOLUME'
                    
            if self.params.make_rotations:
                if ctrl != ctrl_chain[0]:
                    con = pb[ctrl].constraints.new('COPY_ROTATION')
                    con.target       = self.obj
                    con.subtarget    = ctrl_chain[ctrl_chain.index(ctrl)-1]
                    con.use_offset   = True
                    con.target_space = 'LOCAL'
                    con.owner_space  = 'LOCAL'
            
            create_circle_widget(self.obj, ctrl, radius=0.3, head_tail=0.5)

def add_parameters(params):
    """ Add the parameters of this rig type to the
        RigifyParameters PropertyGroup
    """
    params.make_stretch   = bpy.props.BoolProperty(name="Stretch", default=True, description="Enable bone stretch")
    params.make_rotations = bpy.props.BoolProperty(name="Rotations", default=True, description="Make bones follow parent rotation")


def parameters_ui(layout, params):
    """ Create the ui for the rig parameters.
    """
    r = layout.row()
    r.prop(params, "make_stretch")
    r = layout.row()
    r.prop(params, "make_rotations")
                
def create_sample(obj): 
    # generated by rigify.utils.write_metarig
    bpy.ops.object.mode_set(mode='EDIT')
    arm = obj.data

    bones = {}

    bone = arm.edit_bones.new('tentacle')
    bone.head[:] = 0.0000, 0.0000, 0.0000
    bone.tail[:] = 0.0000, 0.0000, 1.0000
    bone.roll = 0.0000
    bone.use_connect = False
    bones['tentacle'] = bone.name
    bone = arm.edit_bones.new('tentacle.001')
    bone.head[:] = 0.0000, 0.0000, 1.0000
    bone.tail[:] = 0.0000, 0.0000, 2.0000
    bone.roll = 0.0000
    bone.use_connect = True
    bone.parent = arm.edit_bones[bones['tentacle']]
    bones['tentacle.001'] = bone.name
    bone = arm.edit_bones.new('tentacle.002')
    bone.head[:] = 0.0000, 0.0000, 2.0000
    bone.tail[:] = 0.0000, 0.0000, 3.0000
    bone.roll = 0.0000
    bone.use_connect = True
    bone.parent = arm.edit_bones[bones['tentacle.001']]
    bones['tentacle.002'] = bone.name

    bpy.ops.object.mode_set(mode='OBJECT')
    pbone = obj.pose.bones[bones['tentacle']]
    pbone.rigify_type = 'tentacle'
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'
    pbone = obj.pose.bones[bones['tentacle.001']]
    pbone.rigify_type = ''
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'
    pbone = obj.pose.bones[bones['tentacle.002']]
    pbone.rigify_type = ''
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'

    bpy.ops.object.mode_set(mode='EDIT')
    for bone in arm.edit_bones:
        bone.select = False
        bone.select_head = False
        bone.select_tail = False
    for b in bones:
        bone = arm.edit_bones[bones[b]]
        bone.select = True
        bone.select_head = True
        bone.select_tail = True
        arm.edit_bones.active = bone
            
            
            
